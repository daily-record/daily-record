<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2020/04/01/test/"/>
      <url>/2020/04/01/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/01/hello-world/"/>
      <url>/2020/04/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DevOps与CI/CD</title>
      <link href="/2020/03/31/devops-yu-ci-cd/"/>
      <url>/2020/03/31/devops-yu-ci-cd/</url>
      
        <content type="html"><![CDATA[<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>DevOps 一词的来自于 Development 和 Operations 的组合，突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠</p></blockquote><p>DevOps 其实包含了三个部分:</p><ul><li>开发</li><li>测试</li><li>运维</li></ul><p>一个团队中各个角色存在天然上的工作矛盾：<br><img src="https://raw.githubusercontent.com/daily-record/daily-record-img/master/20200331144227.png" alt=""></p><p>对于运维来说，稳定性压到一切，新feature越少越好；而对于研发来说，能够开发的新功能越多越好，这种矛盾会导致大量资源的浪费。</p><p>DevOps 希望将产品交付过程中各种壁垒打破，让Dev和Ops一体化，通过自动化工具辅助开发完成运维的部分工作，减少成本。</p></br><h4 id="概述工作流"><a href="#概述工作流" class="headerlink" title="概述工作流"></a>概述工作流</h4><h5 id="传统工作流"><a href="#传统工作流" class="headerlink" title="传统工作流"></a>传统工作流</h5><p>PD(Demond) -&gt; [DEV(Coding) -&gt; SCM(Build) -&gt; QA(Test) -&gt; OPS(Deploy)]-&gt; Release<br>PD 提出需求 -&gt; [开发者根据需求写代码 -&gt; SCM 拿着代码去打包 -&gt; QA 测试 -&gt; 运维进行上线部署]</p></br><h4 id="DevOps工作流"><a href="#DevOps工作流" class="headerlink" title="DevOps工作流"></a>DevOps工作流</h4><p>通过高度自动化工具与流程来使得软件构建、测试、发布更加快捷、频繁和可靠；</p><p>同时，<code>CI/CD</code>（持续集成/持续部署）可看作传统工作流的增强版；<code>DevOps</code> 可看作是 <code>CI/CD</code> 的增强版。</p><p><img src="https://raw.githubusercontent.com/daily-record/daily-record-img/master/20200331150116.png" alt=""></p><p><img src="https://raw.githubusercontent.com/daily-record/daily-record-img/master/20200331150144.png" alt=""></p></br><h2 id="CI与CD"><a href="#CI与CD" class="headerlink" title="CI与CD"></a>CI与CD</h2><p>CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。CI/CD 的核心概念是持续集成、持续交付和持续部署。</p><p>不过，由于还需要编写自动化测试以适应 CI/CD 管道中的各种测试和发布阶段，因此前期投资还是会很大。</p><ul><li>CI:持续集成(Continuous Integration)</li><li>CD:<ul><li>持续交付(Continuous Delivery)</li><li>持续部署(Continuous Deployment)</li></ul></li></ul></br><h4 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h4><p><strong>持续集成指的是，频繁地（一天多次）将代码集成到主干。</strong></p><p>持续集成可以帮助开发人员更加频繁地（有时甚至每天）将代码更改合并到共享分支或“主干”中。一旦开发人员对应用所做的更改被合并，系统就会通过自动构建应用并运行不同级别的自动化测试（通常是单元测试和集成测试）来验证这些更改，确保这些更改没有对应用造成破坏。这意味着测试内容涵盖了从类和函数到构成整个应用的不同模块。如果自动化测试发现新代码和现有代码之间存在冲突，CI 可以更加轻松地快速修复这些错误。</p></br><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p><strong>让产品可以快速迭代，同时还能保持高质量。</strong>它的核心措施是，代码集成到主干之前，<strong>必须通过自动化测试</strong>。只要有一个测试用例失败，就不能集成。</p></br><h5 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h5><ol><li><strong>快速发现错误。</strong>每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</li><li><strong>防止分支大幅偏离主干。</strong>如果不是经常集成，主干又在不断更新，会导致以后集成的难度会非常的大，甚至难以集成。</li></ol><blockquote><p>持续集成并不能消除Bug，而是让它们非常容易发现和改正。</p></blockquote></br><h4 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h4><p><strong>持续交付指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。</strong>如果评审通过，代码就进入生产阶段。</p><p>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。</p><p>持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p></br><h4 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h4><p><strong>持续部署是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。</strong></p><p>持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p><p>持续部署的前提是能自动化完成测试、构建、部署等步骤。</p><p>持续部署意味着开发人员对应用的更改在编写后的几分钟内就能生效（假设它通过了自动化测试）。这更加便于持续接收和整合用户反馈。总而言之，所有这些 CI/CD 的关联步骤都有助于降低应用的部署风险，因此更便于以小件的方式（而非一次性）发布对应用的更改。</p></br><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h4 id="DevOps工具链"><a href="#DevOps工具链" class="headerlink" title="DevOps工具链"></a>DevOps工具链</h4><p><img src="https://raw.githubusercontent.com/daily-record/daily-record-img/master/20200331175003.png" alt=""></p><ul><li>版本控制&amp;协作开发：GitHub、GitLab、BitBucket、SubVersion、Coding、Bazaar</li><li>自动化构建和测试: Apache Ant、Maven 、Selenium、PyUnit、QUnit、JMeter、Gradle、PHPUnit</li><li>持续集成&amp;交付:Jenkins、Capistrano、BuildBot、Fabric、Tinderbox、Travis CI、flow.ci Continuum、LuntBuild、CruiseControl、Integrity、Gump、Go</li><li>容器平台: Docker、Rocket、Ubuntu（LXC）、第三方厂商如（AWS/阿里云）</li><li>配置管理：Chef、Puppet、CFengine、Bash、Rudder、Powershell、RunDeck、Saltstack、Ansible</li><li>微服务平台：OpenShift、Cloud Foundry、Kubernetes、Mesosphere</li><li>服务开通：Puppet、Docker Swarm、Vagrant、Powershell、OpenStack Heat</li><li>日志管理：Logstash、CollectD、StatsD</li><li>监控，警告&amp;分析：Nagios、Ganglia、Sensu、zabbix、ICINGA、Graphite、Kibana</li></ul></br><h4 id="1-提交"><a href="#1-提交" class="headerlink" title="1. 提交"></a>1. 提交</h4><p>开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p></br><h4 id="2-测试（第一轮）"><a href="#2-测试（第一轮）" class="headerlink" title="2. 测试（第一轮）"></a>2. 测试（第一轮）</h4><p>代码仓库对commit操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p><p>测试分为多钟：</p><ul><li>单元测试：针对函数或模块的测试</li><li>集成测试：针对整体产品的某个功能的测试，又称功能测试</li><li>端对端测试：从用户界面直达数据库的全链路测试</li></ul><p>第一轮至少要跑单元测试。</p></br><h4 id="3-构建"><a href="#3-构建" class="headerlink" title="3. 构建"></a>3. 构建</h4><p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p><p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。</p><p>常用的构建工具如下：</p><ul><li>Jenkins</li><li>Travis</li><li>Codeship</li><li>Strider</li></ul></br><h4 id="4-测试（第二轮）"><a href="#4-测试（第二轮）" class="headerlink" title="4. 测试（第二轮）"></a>4. 测试（第二轮）</h4><p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p><p>第二轮是全面测试，单元测试和集成测试都会跑，有条件的话，也要做端对端测试。所有测试以自动化为主，少数无法自动化的测试用例，就要人工跑。</p><p>需要强调的是，新版本的每一个更新点都必须测试到。如果测试的覆盖率不高，进入后面的部署阶段后，很可能会出现严重的问题。</p></br><h4 id="5-部署"><a href="#5-部署" class="headerlink" title="5. 部署"></a>5. 部署</h4><p>通过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（ tar filename.tar * ）存档，发到生产服务器。</p><p>生产服务器将打包文件，解包成本地的一个目录，再将运行路径的符号链接（symlink）指向这个目录，然后重新启动应用。这方面的部署工具有Ansible，Chef，Puppet等。</p></br><h4 id="6-回滚"><a href="#6-回滚" class="headerlink" title="6. 回滚"></a>6. 回滚</h4><p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录。</p></br><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener">阮一峰：持续集成是什么</a></p><p><a href="https://marlous.github.io/2018/10/31/DevOps%20%E4%B8%8E%20CICD%20%E7%9A%84%E6%A6%82%E5%BF%B5/#%E4%B8%89-DevOps-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1" target="_blank" rel="noopener">DevOps工作流</a></p><p><a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noopener">RedHat：什么是CI/CD</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> CI </tag>
            
            <tag> CD </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
